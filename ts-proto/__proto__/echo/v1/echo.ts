// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: echo/v1/echo.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  ClientReadableStream,
  type ClientUnaryCall,
  ClientWritableStream,
  handleBidiStreamingCall,
  handleClientStreamingCall,
  handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../google/protobuf/timestamp.js";

export const protobufPackage = "echo.v1";

export interface EchoRequest {
  message: string;
}

export interface EchoResponse {
  message: string;
  response_time?: Date | null;
}

export interface EchoStreamRequest {
  message: string;
  repeat_count: number;
}

export interface EchoStreamResponse {
  message: string;
  sequence_number: number;
  response_time?: Date | null;
}

export interface StreamEchoRequest {
  message_part: string;
}

export interface StreamEchoResponse {
  full_message: string;
  response_time?: Date | null;
}

export interface ChatRequest {
  user_id: string;
  message: string;
  response_time?: Date | null;
}

export interface ChatResponse {
  user_id: string;
  message: string;
  response_time?: Date | null;
}

function createBaseEchoRequest(): EchoRequest {
  return { message: "" };
}

export const EchoRequest = {
  encode(message: EchoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<EchoRequest, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<EchoRequest | EchoRequest[]> | Iterable<EchoRequest | EchoRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoRequest.encode(p).finish()];
        }
      } else {
        yield* [EchoRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, EchoRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<EchoRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoRequest.decode(p)];
        }
      } else {
        yield* [EchoRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): EchoRequest {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EchoRequest): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EchoRequest>, I>>(base?: I): EchoRequest {
    return EchoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EchoRequest>, I>>(object: I): EchoRequest {
    const message = createBaseEchoRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseEchoResponse(): EchoResponse {
  return { message: "", response_time: null };
}

export const EchoResponse = {
  encode(message: EchoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      Timestamp.encode(toTimestamp(message.response_time), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<EchoResponse, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<EchoResponse | EchoResponse[]> | Iterable<EchoResponse | EchoResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoResponse.encode(p).finish()];
        }
      } else {
        yield* [EchoResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, EchoResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<EchoResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoResponse.decode(p)];
        }
      } else {
        yield* [EchoResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): EchoResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      response_time: isSet(object.response_time) ? fromJsonTimestamp(object.response_time) : null,
    };
  },

  toJSON(message: EchoResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      obj.response_time = message.response_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EchoResponse>, I>>(base?: I): EchoResponse {
    return EchoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EchoResponse>, I>>(object: I): EchoResponse {
    const message = createBaseEchoResponse();
    message.message = object.message ?? "";
    message.response_time = object.response_time ?? null;
    return message;
  },
};

function createBaseEchoStreamRequest(): EchoStreamRequest {
  return { message: "", repeat_count: 0 };
}

export const EchoStreamRequest = {
  encode(message: EchoStreamRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.repeat_count !== 0) {
      writer.uint32(16).int32(message.repeat_count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoStreamRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.repeat_count = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<EchoStreamRequest, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<EchoStreamRequest | EchoStreamRequest[]> | Iterable<EchoStreamRequest | EchoStreamRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoStreamRequest.encode(p).finish()];
        }
      } else {
        yield* [EchoStreamRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, EchoStreamRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<EchoStreamRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoStreamRequest.decode(p)];
        }
      } else {
        yield* [EchoStreamRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): EchoStreamRequest {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      repeat_count: isSet(object.repeat_count) ? globalThis.Number(object.repeat_count) : 0,
    };
  },

  toJSON(message: EchoStreamRequest): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.repeat_count !== 0) {
      obj.repeat_count = Math.round(message.repeat_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EchoStreamRequest>, I>>(base?: I): EchoStreamRequest {
    return EchoStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EchoStreamRequest>, I>>(object: I): EchoStreamRequest {
    const message = createBaseEchoStreamRequest();
    message.message = object.message ?? "";
    message.repeat_count = object.repeat_count ?? 0;
    return message;
  },
};

function createBaseEchoStreamResponse(): EchoStreamResponse {
  return { message: "", sequence_number: 0, response_time: null };
}

export const EchoStreamResponse = {
  encode(message: EchoStreamResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.sequence_number !== 0) {
      writer.uint32(16).int32(message.sequence_number);
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      Timestamp.encode(toTimestamp(message.response_time), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoStreamResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sequence_number = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<EchoStreamResponse, Uint8Array>
  async *encodeTransform(
    source:
      | AsyncIterable<EchoStreamResponse | EchoStreamResponse[]>
      | Iterable<EchoStreamResponse | EchoStreamResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoStreamResponse.encode(p).finish()];
        }
      } else {
        yield* [EchoStreamResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, EchoStreamResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<EchoStreamResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [EchoStreamResponse.decode(p)];
        }
      } else {
        yield* [EchoStreamResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): EchoStreamResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      sequence_number: isSet(object.sequence_number) ? globalThis.Number(object.sequence_number) : 0,
      response_time: isSet(object.response_time) ? fromJsonTimestamp(object.response_time) : null,
    };
  },

  toJSON(message: EchoStreamResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.sequence_number !== 0) {
      obj.sequence_number = Math.round(message.sequence_number);
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      obj.response_time = message.response_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EchoStreamResponse>, I>>(base?: I): EchoStreamResponse {
    return EchoStreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EchoStreamResponse>, I>>(object: I): EchoStreamResponse {
    const message = createBaseEchoStreamResponse();
    message.message = object.message ?? "";
    message.sequence_number = object.sequence_number ?? 0;
    message.response_time = object.response_time ?? null;
    return message;
  },
};

function createBaseStreamEchoRequest(): StreamEchoRequest {
  return { message_part: "" };
}

export const StreamEchoRequest = {
  encode(message: StreamEchoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message_part !== "") {
      writer.uint32(10).string(message.message_part);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamEchoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamEchoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message_part = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<StreamEchoRequest, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<StreamEchoRequest | StreamEchoRequest[]> | Iterable<StreamEchoRequest | StreamEchoRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [StreamEchoRequest.encode(p).finish()];
        }
      } else {
        yield* [StreamEchoRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, StreamEchoRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<StreamEchoRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [StreamEchoRequest.decode(p)];
        }
      } else {
        yield* [StreamEchoRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): StreamEchoRequest {
    return { message_part: isSet(object.message_part) ? globalThis.String(object.message_part) : "" };
  },

  toJSON(message: StreamEchoRequest): unknown {
    const obj: any = {};
    if (message.message_part !== "") {
      obj.message_part = message.message_part;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamEchoRequest>, I>>(base?: I): StreamEchoRequest {
    return StreamEchoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamEchoRequest>, I>>(object: I): StreamEchoRequest {
    const message = createBaseStreamEchoRequest();
    message.message_part = object.message_part ?? "";
    return message;
  },
};

function createBaseStreamEchoResponse(): StreamEchoResponse {
  return { full_message: "", response_time: null };
}

export const StreamEchoResponse = {
  encode(message: StreamEchoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.full_message !== "") {
      writer.uint32(10).string(message.full_message);
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      Timestamp.encode(toTimestamp(message.response_time), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamEchoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamEchoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.full_message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<StreamEchoResponse, Uint8Array>
  async *encodeTransform(
    source:
      | AsyncIterable<StreamEchoResponse | StreamEchoResponse[]>
      | Iterable<StreamEchoResponse | StreamEchoResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [StreamEchoResponse.encode(p).finish()];
        }
      } else {
        yield* [StreamEchoResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, StreamEchoResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<StreamEchoResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [StreamEchoResponse.decode(p)];
        }
      } else {
        yield* [StreamEchoResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): StreamEchoResponse {
    return {
      full_message: isSet(object.full_message) ? globalThis.String(object.full_message) : "",
      response_time: isSet(object.response_time) ? fromJsonTimestamp(object.response_time) : null,
    };
  },

  toJSON(message: StreamEchoResponse): unknown {
    const obj: any = {};
    if (message.full_message !== "") {
      obj.full_message = message.full_message;
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      obj.response_time = message.response_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamEchoResponse>, I>>(base?: I): StreamEchoResponse {
    return StreamEchoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamEchoResponse>, I>>(object: I): StreamEchoResponse {
    const message = createBaseStreamEchoResponse();
    message.full_message = object.full_message ?? "";
    message.response_time = object.response_time ?? null;
    return message;
  },
};

function createBaseChatRequest(): ChatRequest {
  return { user_id: "", message: "", response_time: null };
}

export const ChatRequest = {
  encode(message: ChatRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      Timestamp.encode(toTimestamp(message.response_time), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChatRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<ChatRequest, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<ChatRequest | ChatRequest[]> | Iterable<ChatRequest | ChatRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [ChatRequest.encode(p).finish()];
        }
      } else {
        yield* [ChatRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, ChatRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<ChatRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [ChatRequest.decode(p)];
        }
      } else {
        yield* [ChatRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): ChatRequest {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      response_time: isSet(object.response_time) ? fromJsonTimestamp(object.response_time) : null,
    };
  },

  toJSON(message: ChatRequest): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      obj.response_time = message.response_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatRequest>, I>>(base?: I): ChatRequest {
    return ChatRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatRequest>, I>>(object: I): ChatRequest {
    const message = createBaseChatRequest();
    message.user_id = object.user_id ?? "";
    message.message = object.message ?? "";
    message.response_time = object.response_time ?? null;
    return message;
  },
};

function createBaseChatResponse(): ChatResponse {
  return { user_id: "", message: "", response_time: null };
}

export const ChatResponse = {
  encode(message: ChatResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      Timestamp.encode(toTimestamp(message.response_time), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChatResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<ChatResponse, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<ChatResponse | ChatResponse[]> | Iterable<ChatResponse | ChatResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [ChatResponse.encode(p).finish()];
        }
      } else {
        yield* [ChatResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, ChatResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<ChatResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [ChatResponse.decode(p)];
        }
      } else {
        yield* [ChatResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): ChatResponse {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      response_time: isSet(object.response_time) ? fromJsonTimestamp(object.response_time) : null,
    };
  },

  toJSON(message: ChatResponse): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.response_time !== undefined && message.response_time !== null) {
      obj.response_time = message.response_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatResponse>, I>>(base?: I): ChatResponse {
    return ChatResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatResponse>, I>>(object: I): ChatResponse {
    const message = createBaseChatResponse();
    message.user_id = object.user_id ?? "";
    message.message = object.message ?? "";
    message.response_time = object.response_time ?? null;
    return message;
  },
};

export type EchoServiceService = typeof EchoServiceService;
export const EchoServiceService = {
  echo: {
    path: "/echo.v1.EchoService/Echo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EchoRequest) => Buffer.from(EchoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EchoRequest.decode(value),
    responseSerialize: (value: EchoResponse) => Buffer.from(EchoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EchoResponse.decode(value),
  },
  echoStream: {
    path: "/echo.v1.EchoService/EchoStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EchoStreamRequest) => Buffer.from(EchoStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EchoStreamRequest.decode(value),
    responseSerialize: (value: EchoStreamResponse) => Buffer.from(EchoStreamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EchoStreamResponse.decode(value),
  },
  streamEcho: {
    path: "/echo.v1.EchoService/StreamEcho",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: StreamEchoRequest) => Buffer.from(StreamEchoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamEchoRequest.decode(value),
    responseSerialize: (value: StreamEchoResponse) => Buffer.from(StreamEchoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StreamEchoResponse.decode(value),
  },
  chat: {
    path: "/echo.v1.EchoService/Chat",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: ChatRequest) => Buffer.from(ChatRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ChatRequest.decode(value),
    responseSerialize: (value: ChatResponse) => Buffer.from(ChatResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ChatResponse.decode(value),
  },
} as const;

export interface EchoServiceServer extends UntypedServiceImplementation {
  echo: handleUnaryCall<EchoRequest, EchoResponse>;
  echoStream: handleServerStreamingCall<EchoStreamRequest, EchoStreamResponse>;
  streamEcho: handleClientStreamingCall<StreamEchoRequest, StreamEchoResponse>;
  chat: handleBidiStreamingCall<ChatRequest, ChatResponse>;
}

export interface EchoServiceClient extends Client {
  echo(request: EchoRequest, callback: (error: ServiceError | null, response: EchoResponse) => void): ClientUnaryCall;
  echo(
    request: EchoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EchoResponse) => void,
  ): ClientUnaryCall;
  echo(
    request: EchoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EchoResponse) => void,
  ): ClientUnaryCall;
  echoStream(request: EchoStreamRequest, options?: Partial<CallOptions>): ClientReadableStream<EchoStreamResponse>;
  echoStream(
    request: EchoStreamRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<EchoStreamResponse>;
  streamEcho(
    callback: (error: ServiceError | null, response: StreamEchoResponse) => void,
  ): ClientWritableStream<StreamEchoRequest>;
  streamEcho(
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StreamEchoResponse) => void,
  ): ClientWritableStream<StreamEchoRequest>;
  streamEcho(
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StreamEchoResponse) => void,
  ): ClientWritableStream<StreamEchoRequest>;
  streamEcho(
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StreamEchoResponse) => void,
  ): ClientWritableStream<StreamEchoRequest>;
  chat(): ClientDuplexStream<ChatRequest, ChatResponse>;
  chat(options: Partial<CallOptions>): ClientDuplexStream<ChatRequest, ChatResponse>;
  chat(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<ChatRequest, ChatResponse>;
}

export const EchoServiceClient = makeGenericClientConstructor(EchoServiceService, "echo.v1.EchoService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EchoServiceClient;
  service: typeof EchoServiceService;
  serviceName: string;
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = BigInt(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds.toString()) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
